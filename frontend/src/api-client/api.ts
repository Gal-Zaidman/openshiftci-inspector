/* tslint:disable */
/* eslint-disable */
/**
 * Openshift CI Inspector.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Job
 */
export interface Job {
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    completionTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitBaseLink?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitBaseRef?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitBaseSHA?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitOrg?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitRepo?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    gitRepoLink?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    job: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    jobSafeName: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    pendingTime?: string;
    /**
     * 
     * @type {Array<Pull>}
     * @memberof Job
     */
    pulls: Array<Pull>;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof Job
     */
    url: string;
}
/**
 * 
 * @export
 * @interface JobsGetResponseBody
 */
export interface JobsGetResponseBody {
    /**
     * 
     * @type {Job}
     * @memberof JobsGetResponseBody
     */
    job: Job;
}
/**
 * 
 * @export
 * @interface JobsListResponseBody
 */
export interface JobsListResponseBody {
    /**
     * Jobs is the list of jobs in the response
     * @type {Array<Job>}
     * @memberof JobsListResponseBody
     */
    jobs: Array<Job>;
}
/**
 * 
 * @export
 * @interface Pull
 */
export interface Pull {
    /**
     * Author is the GitHub username of the author of the PR.
     * @type {string}
     * @memberof Pull
     */
    author: string;
    /**
     * AuthorLink is a HTTP URL of the author\'s profile.
     * @type {string}
     * @memberof Pull
     */
    authorLink: string;
    /**
     * CommitLink is a HTTP URL of the commit.
     * @type {string}
     * @memberof Pull
     */
    commitLink: string;
    /**
     * Number is the pull request number
     * @type {number}
     * @memberof Pull
     */
    number: number;
    /**
     * PullLink is a HTTP URL of the pull request.
     * @type {string}
     * @memberof Pull
     */
    pullLink: string;
    /**
     * SHA is the SHA of the pull request.
     * @type {string}
     * @memberof Pull
     */
    sha: string;
}

/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a single job by ID.
         * @param {string} iD ID of the job to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob: async (iD: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'iD' is not null or undefined
            if (iD === null || iD === undefined) {
                throw new RequiredError('iD','Required parameter iD was null or undefined when calling getJob.');
            }
            const localVarPath = `/jobs/{ID}`
                .replace(`{${"ID"}}`, encodeURIComponent(String(iD)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of jobs currently stored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            const queryParameters = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                queryParameters.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                queryParameters.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a single job by ID.
         * @param {string} iD ID of the job to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJob(iD: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsGetResponseBody>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJob(iD, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a list of jobs currently stored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listJobs(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsListResponseBody>> {
            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).listJobs(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get a single job by ID.
         * @param {string} iD ID of the job to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJob(iD: string, options?: any): AxiosPromise<JobsGetResponseBody> {
            return JobsApiFp(configuration).getJob(iD, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of jobs currently stored.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listJobs(options?: any): AxiosPromise<JobsListResponseBody> {
            return JobsApiFp(configuration).listJobs(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @summary Get a single job by ID.
     * @param {string} iD ID of the job to fetch.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public getJob(iD: string, options?: any) {
        return JobsApiFp(this.configuration).getJob(iD, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of jobs currently stored.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public listJobs(options?: any) {
        return JobsApiFp(this.configuration).listJobs(options).then((request) => request(this.axios, this.basePath));
    }
}


