{"version":3,"sources":["ui/Sidebar.tsx","App.tsx","theme.tsx","jobs/ui/components/JobStatus.tsx","common/Link.tsx","jobs/ui/components/JobTime.tsx","jobs/ui/JobDashboardPage.tsx","notification/service/INotificationService.tsx","notification/service/NotificationServiceImpl.tsx","notification/service/NotificationServiceFactory.tsx","notification/ui/ToastHandler.tsx","notification/ui/ToastHandlerFactory.tsx","api-client/base.ts","api-client/api.ts","api-client/configuration.ts","jobs/list.ts","service/service.ts","jobs/get.ts","jobs/ui/components/JobDuration.tsx","jobs/ui/components/JobInfoCard.tsx","jobs/ui/components/JobPreviousCard.tsx","jobs/ui/components/JobRelatedCard.tsx","jobs/ui/components/JobMetricsCard.tsx","jobs/ui/JobDetailsPage.tsx","jobs/previous.ts","jobs/related.ts","jobs/metrics.ts","index.tsx"],"names":["Sidebar","props","history","useHistory","theme","createMuiTheme","palette","background","default","text","primary","secondary","success","main","green","A400","error","red","warning","orange","ThemeProvider","Box","className","p","src","alt","Typography","variant","component","gutterBottom","align","List","ListItem","button","ListItemIcon","color","ListItemText","onClick","push","App","this","toastHandler","children","React","JobStatus","status","htmlColor","fontSize","Link","render","RouterLink","to","title","JobTime","time","parsedTime","Date","parse","Tooltip","style","whiteSpace","currentDate","lookupTime","seconds","Math","floor","years","months","days","hours","minutes","timeSince","getTime","Pulls","job","pulls","Fragment","map","pull","key","number","href","pullLink","target","rel","authorLink","author","Row","useState","anchorEl","setAnchorEl","handleClose","TableRow","id","TableCell","display","flexDirection","mr","paddingTop","flex","startTime","gitOrg","gitRepo","gitRepoLink","gitBaseRef","width","ml","Button","size","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","onSearch","NotificationType","JobDashboardPage","componentDidMount","jobsListService","register","refresh","componentWillUnmount","deregister","update","setState","isLoaded","isRefreshing","jobs","getJobs","search","state","typingTimer","window","clearTimeout","undefined","setFilters","jobFilter","repoFilter","searchFor","keyword","repository","changeJobFilter","e","value","setTimeout","changeRepoFilter","m","TableContainer","Paper","LinearProgress","Table","TableHead","colSpan","TextField","label","onChange","TableBody","Array","Component","NotificationServiceImpl","notificationHandlers","handler","index","indexOf","splice","notification","forEach","handleNotification","messageText","notifyUser","message","type","SUCCESS","ERROR","WARNING","INFO","NotificationServiceFactory","notificationService","ToastHandler","toaster","refHandlers","ref","registerNotificationHandler","deregisterNotificationHandler","iconName","intentType","Intent","DANGER","PRIMARY","NONE","show","icon","intent","position","Position","TOP_RIGHT","ToastHandlerFactory","notificationServiceFactory","create","BASE_PATH","replace","BaseAPI","configuration","basePath","axios","globalAxios","RequiredError","field","msg","name","Error","JobsApiAxiosParamCreator","getJob","iD","a","options","localVarPath","encodeURIComponent","String","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","queryParameters","URLSearchParams","set","query","toString","headersFromBaseOptions","headers","url","pathname","hash","getMetrics","getPreviousJobs","jobLike","repoLike","limit","offset","getRelatedJobs","listJobs","JobsApiFp","localVarAxiosArgs","axiosRequestArgs","request","JobsApi","then","Configuration","param","apiKey","username","password","accessToken","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","JobsListService","api","loaded","refreshing","notify","response","data","console","log","handlers","Set","delete","add","JobsGetService","JobDuration","completionTime","parsedStartTime","parsedCompletionTime","timeDuration","JobInfoCard","reload","componentDidUpdate","prevProps","prevState","snapshot","jobsGetService","alignItems","justifyContent","CircularProgress","Card","CardHeader","avatar","CardContent","Grid","container","spacing","item","xs","getPulls","pendingTime","CardActions","assetURL","JobPreviousCard","jobsGetPreviousService","subheader","height","stickyHeader","JobRelatedCard","jobsGetRelatedService","JobMetricsCard","onQueryChange","onRun","loading","metricsService","matrix","updateMatrix","vector","updateVector","scalar","updateScalar","lowestTimestamp","highestTimestamp","series","labels","reduce","prev","current","points","v","timestamp","x","moment","unix","tz","format","y","line","timeRangeLowest","timeRangeHighest","getTickValues","diff","result","i","getUTCDate","disabled","fullWidth","autoComplete","xScale","precision","xFormat","yScale","min","max","margin","top","right","bottom","left","pointSize","pointColor","from","modifiers","pointBorderWidth","pointBorderColor","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","tickValues","legend","legendOffset","legendPosition","axisLeft","useMesh","TabPanel","other","role","hidden","aria-labelledby","JobDetailsPage","AppBar","Tabs","tab","changeTab","indicatorColor","Tab","Badge","badgeContent","elevation","newValue","JobsGetPreviousService","JobsGetRelatedService","JobsMetricsService","toastHandlerFactory","jobsAPI","location","protocol","hostname","port","jobMetricsService","ReactDOM","CssBaseline","exact","path","match","params","document","getElementById"],"mappings":"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","file":"static/js/main.68980802.chunk.js","sourcesContent":["import {Box, createMuiTheme, List, ListItem, ListItemIcon, ListItemText, Typography} from \"@material-ui/core\";\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport * as React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {ThemeProvider} from \"@material-ui/core/styles\";\nimport {green, orange} from \"@material-ui/core/colors\";\nimport red from \"@material-ui/core/colors/red\";\nimport './sidebar.css';\n\nexport interface ISidebarProps {\n}\n\nexport default function Sidebar(props: ISidebarProps) {\n    const history = useHistory();\n    const theme = createMuiTheme({\n        palette: {\n            background: {\n                default: '#262626',\n            },\n            text: {\n                primary: '#ffffff',\n                secondary: '#ffffff',\n            },\n            success: {\n                main: green.A400,\n            },\n            error: {\n                main: red.A400,\n            },\n            warning: {\n                main: orange.A400,\n            },\n            primary: {\n                main: '#bb0000',\n            },\n            secondary: {\n                main: '#151515',\n            },\n        },\n    });\n    return <ThemeProvider theme={theme}>\n        <Box className=\"app__sidebar\">\n            <Box p={2} className=\"app__logo\">\n                <img src={\"/logo.svg\"} alt={\"A yellow fedora hat with a yellow propeller on top\"} />\n                <Typography variant={\"h5\"} component={\"h1\"} gutterBottom={true} align={\"center\"}>Openshift CI Inspector</Typography>\n            </Box>\n            <List>\n                <ListItem button={true}>\n                    <ListItemIcon><DashboardIcon color={\"primary\"} /></ListItemIcon>\n                    <ListItemText onClick={function() {history.push(\"/\")}}>\n                        Home\n                    </ListItemText>\n                </ListItem>\n            </List>\n        </Box>\n    </ThemeProvider>\n}\n","import * as React from 'react';\nimport '../node_modules/@blueprintjs/core/lib/css/blueprint.css';\nimport '../node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport './App.css';\nimport Sidebar from \"./ui/Sidebar\";\n\ninterface IAppProps {\n    toastHandler: JSX.Element,\n}\n\nclass App extends React.Component<IAppProps> {\n  render() {\n    return <div className=\"app\">\n        {this.props.toastHandler}\n        <Sidebar />\n        <div className=\"app__main\">\n            <div className=\"app__pages\">\n              {this.props.children}\n            </div>\n        </div>\n      </div>\n    ;\n  }\n}\n\nexport default App;\n","import red from '@material-ui/core/colors/red';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport {green, orange} from \"@material-ui/core/colors\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      default: '#f5f5f5',\n    },\n    success: {\n      main: green.A400,\n    },\n    error: {\n      main: red.A400,\n    },\n    warning: {\n      main: orange.A400,\n    },\n    primary: {\n      main: '#bb0000',\n    },\n    secondary: {\n      main: '#151515',\n    },\n  },\n});\n\nexport default theme;\n","import CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport WatchLaterIcon from \"@material-ui/icons/WatchLater\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\nimport React from \"react\";\r\nimport theme from \"../../../theme\"\r\n\r\nexport interface IJobStatusProps{\r\n    status: string\r\n    fontSize: 'inherit' | 'default' | 'small' | 'large'\r\n}\r\n\r\nexport default function JobStatus(props: IJobStatusProps) {\r\n    const status = props.status\r\n    switch (status) {\r\n        case \"success\":\r\n            return <CheckCircleIcon htmlColor={theme.palette.success.main} fontSize={props.fontSize} />\r\n        case \"failure\":\r\n            return <ErrorIcon htmlColor={theme.palette.error.main} fontSize={props.fontSize} />\r\n        case \"pending\":\r\n            return <WatchLaterIcon htmlColor={theme.palette.warning.main} fontSize={props.fontSize} />\r\n        case \"aborted\":\r\n            return <CancelIcon htmlColor={theme.palette.secondary.main} fontSize={props.fontSize}  />\r\n        default:\r\n            return <HelpIcon htmlColor={theme.palette.secondary.main} fontSize={props.fontSize}  />\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport {Link as MUILink} from \"@material-ui/core\"\r\nimport {Link as RouterLink} from \"react-router-dom\";\r\n\r\ninterface ILinkProps {\r\n    to: string\r\n    children: string|JSX.Element|JSX.Element[]\r\n    title?: string\r\n}\r\n\r\nexport default class Link extends React.Component<ILinkProps> {\r\n    render = () => {\r\n        return <MUILink component={RouterLink} to={this.props.to} title={this.props.title}>\r\n            {this.props.children}\r\n        </MUILink>\r\n    }\r\n}","import {Tooltip} from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport interface IJobTimeProps{\n    time?: string\n}\n\nfunction timeSince(currentDate: number, lookupTime: number) {\n\n    const seconds = Math.floor((currentDate - lookupTime) / 1000);\n\n    const years = Math.floor(seconds / 31536000);\n    if (years >= 1) {\n        return years + \" years\";\n    }\n    const months = Math.floor(seconds / 2592000);\n    if (months >= 1) {\n        return months + \" months\";\n    }\n    const days = Math.floor(seconds / 86400);\n    if (days >= 1) {\n        return days + \" days\";\n    }\n    const hours = Math.floor(seconds / 3600);\n    if (hours >= 1) {\n        return hours + \" hours\";\n    }\n    const minutes = Math.floor(seconds / 60);\n    if (minutes >= 1) {\n        return minutes + \" minutes\";\n    }\n    return Math.floor(seconds) + \" seconds\";\n}\n\nexport default function JobTime(props: IJobTimeProps) {\n    if (!props.time || props.time === \"\") {\n        return <span>&mdash;</span>\n    }\n    const parsedTime = Date.parse(props.time)\n    return <Tooltip title={props.time}><span><span style={{whiteSpace:\"nowrap\"}}>{timeSince(new Date().getTime(), parsedTime)}</span> ago</span></Tooltip>\n}\n","import {\n    Box, Button,\n    LinearProgress, ListItemIcon, ListItemText, Menu, MenuItem,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow, TextField,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport JobsListService from \"../list\";\nimport {Job} from \"../../api-client\";\nimport JobStatus from \"./components/JobStatus\";\nimport Link from \"../../common/Link\"\nimport JobTime from \"./components/JobTime\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport ImportContactsIcon from '@material-ui/icons/ImportContacts';\nimport { useHistory } from \"react-router-dom\";\n\ninterface IPullsProps {\n    job: Job\n}\n\nfunction Pulls(props: IPullsProps) {\n    if (props.job.pulls == null) {\n        return null\n    }\n    return <React.Fragment>{props.job.pulls.map(pull => {\n        return <span key={pull.number}><a href={pull.pullLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.number}</a> by <a href={pull.authorLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.author}</a></span>\n    })}</React.Fragment>\n}\n\ninterface IRowProps {\n    job: Job,\n    onSearch: (query: string, repository: string) => void\n}\n\nfunction Row(props: IRowProps) {\n    const history = useHistory();\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const job = props.job\n\n    return (\n        <TableRow key={job.id}>\n            <TableCell>\n                <Box display={\"flex\"} flexDirection={\"row\"}>\n                    <Box component={\"span\"} mr={1} style={{paddingTop:\"4px\"}}>\n                        <JobStatus status={job.status} fontSize={\"inherit\"} />\n                    </Box>\n                    <Box flex={1}>\n                        <Link to={\"/\" + job.id} title={\"Click to show details page...\"}>\n                            {job.job}\n                        </Link>\n                    </Box>\n                </Box>\n            </TableCell>\n            <TableCell>\n                <JobTime time={job.startTime} />\n            </TableCell>\n            <TableCell>\n                {job.gitOrg != null && job.gitRepo != null?<a href={job.gitRepoLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{job.gitOrg}/{job.gitRepo}</a>:null}\n            </TableCell>\n            <TableCell>{job.gitBaseRef}</TableCell>\n            <TableCell><Pulls job={job} /></TableCell>\n            <TableCell width={\"2rem\"}>\n                <Box display={\"inline-block\"} ml={1}>\n                    <Button size={\"small\"} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n                        <MoreVertIcon fontSize={\"small\"} />\n                    </Button>\n                </Box>\n                <Menu\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <MenuItem onClick={() => {\n                        handleClose()\n                        history.push(\"/\" + job.id)\n                    }}>\n                        <ListItemIcon><ImportContactsIcon /></ListItemIcon>\n                        <ListItemText>Open Details Page...</ListItemText>\n                    </MenuItem>\n                    <MenuItem onClick={() => {\n                        handleClose()\n                        props.onSearch(job.job, \"\")\n                    }}>\n                        <ListItemIcon><SearchIcon /></ListItemIcon>\n                        <ListItemText>Show only &ldquo;<code>{job.job}</code>&rdquo; jobs</ListItemText>\n                    </MenuItem>\n                    {job.gitOrg != null && job.gitRepo != null?<MenuItem onClick={() => {\n                        handleClose()\n                        props.onSearch(\"\", job.gitOrg as string + \"/\" + job.gitRepo)\n                    }}>\n                        <ListItemIcon><SearchIcon /></ListItemIcon>\n                        <ListItemText>Show only jobs for the &ldquo;<code>{job.gitOrg}/{job.gitRepo}</code>&rdquo; repository</ListItemText>\n                    </MenuItem>:null}\n                    {job.gitOrg != null && job.gitRepo != null?<MenuItem onClick={() => {\n                        handleClose()\n                        props.onSearch(job.job, job.gitOrg as string + \"/\" + job.gitRepo)\n                    }}>\n                        <ListItemIcon><SearchIcon /></ListItemIcon>\n                        <ListItemText>Show only &ldquo;<code>{job.job}</code>&rdquo; jobs for the &ldquo;<code>{job.gitOrg}/{job.gitRepo}</code>&rdquo; repository</ListItemText>\n                    </MenuItem>:null}\n                </Menu>\n            </TableCell>\n        </TableRow>\n    );\n}\n\ninterface IDashboardState {\n    jobFilter: string,\n    repoFilter: string,\n    typingTimer?: number,\n    isLoaded: boolean,\n    isRefreshing: boolean,\n    jobs: Array<Job>\n}\n\ninterface IDashboardProps {\n    jobsListService: JobsListService,\n}\n\nexport default class JobDashboardPage extends React.Component<IDashboardProps, IDashboardState> {\n\n    constructor(props: IDashboardProps) {\n        super(props);\n        this.state = {\n            jobFilter: \"\",\n            repoFilter: \"\",\n            isLoaded: false,\n            isRefreshing: false,\n            jobs: new Array<Job>()\n        }\n    }\n\n    componentDidMount = () => {\n        this.props.jobsListService.register(this)\n        // noinspection JSIgnoredPromiseFromCall\n        this.props.jobsListService.refresh()\n    }\n\n    componentWillUnmount = () => {\n        this.props.jobsListService.deregister(this)\n    }\n\n    update = () => {\n        this.setState({\n            isLoaded: this.props.jobsListService.isLoaded(),\n            isRefreshing: this.props.jobsListService.isRefreshing(),\n            jobs: this.props.jobsListService.getJobs()\n        })\n    }\n\n    search = () => {\n        if (this.state.typingTimer) {\n            window.clearTimeout(this.state.typingTimer)\n        }\n        this.setState({typingTimer:undefined})\n        this.props.jobsListService.setFilters(this.state.jobFilter, this.state.repoFilter)\n    }\n\n    searchFor = (keyword: string, repository: string) => {\n        if (this.state.typingTimer) {\n            window.clearTimeout(this.state.typingTimer)\n        }\n\n        this.setState({\n            jobFilter: keyword,\n            repoFilter: repository,\n            typingTimer:undefined,\n        })\n        this.props.jobsListService.setFilters(keyword, repository)\n    }\n\n    changeJobFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.state.typingTimer) {\n            window.clearTimeout(this.state.typingTimer)\n        }\n        this.setState({\n            jobFilter: e.target.value,\n            typingTimer: window.setTimeout(this.search, 300)\n        })\n    }\n\n    changeRepoFilter = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.state.typingTimer) {\n            window.clearTimeout(this.state.typingTimer)\n        }\n        this.setState({\n            repoFilter: e.target.value,\n            typingTimer: window.setTimeout(this.search, 300)\n        })\n    }\n\n    render = () => {\n        return <Box m={2}>\n            <h1>Last job runs</h1>\n            <TableContainer component={Paper}>\n                {this.state.isRefreshing?<LinearProgress />:null}\n                <Table size=\"small\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Job</TableCell>\n                            <TableCell>Started</TableCell>\n                            <TableCell>Git repository</TableCell>\n                            <TableCell>Base</TableCell>\n                            <TableCell>Pulls</TableCell>\n                            <TableCell width={\"2rem\"} />\n                        </TableRow>\n                        <TableRow>\n                            <TableCell colSpan={4}>\n                                <Box mr={2} component={\"span\"}><TextField id=\"filter-job\" label=\"Filter by job\" size={\"small\"} value={this.state.jobFilter} onChange={this.changeJobFilter} /></Box>\n                                <Box mr={2} component={\"span\"}><TextField id=\"filter-repo\" label=\"Filter by repository\" size={\"small\"} value={this.state.repoFilter} onChange={this.changeRepoFilter} /></Box>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.jobs.map(job => <Row job={job} onSearch={this.searchFor} />)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Box>;\n    }\n}","export enum NotificationType {\n    INFO,\n    SUCCESS,\n    WARNING,\n    ERROR\n}\n\nexport interface INotification {\n    message: string,\n    type: NotificationType\n}\n\nexport interface INotificationHandler {\n    handleNotification(notification: INotification):void;\n}\n\ninterface INotificationService {\n    notifyUser(notification: INotification):void;\n\n    registerNotificationHandler(handler: INotificationHandler): void;\n    deregisterNotificationHandler(handler: INotificationHandler): void;\n}\n\nexport default INotificationService;","import INotificationService, {INotification, INotificationHandler, NotificationType} from \"./INotificationService\";\n\nclass NotificationServiceImpl implements INotificationService{\n    private notificationHandlers : INotificationHandler[] = [];\n\n    public deregisterNotificationHandler(handler: INotificationHandler): void {\n        const index = this.notificationHandlers.indexOf(handler, 0);\n        if (index > -1) {\n            this.notificationHandlers.splice(index, 1);\n        }\n    }\n\n    public notifyUser(notification: INotification): void {\n        this.notificationHandlers.forEach((handler) => {\n            handler.handleNotification(notification);\n        })\n    }\n\n    public success(messageText: string) : void {\n        this.notifyUser({\n            message: messageText,\n            type: NotificationType.SUCCESS\n        })\n    }\n\n    public error(messageText: string) : void {\n        this.notifyUser({\n            message: messageText,\n            type: NotificationType.ERROR\n        })\n    }\n\n    public warning(messageText: string) : void {\n        this.notifyUser({\n            message: messageText,\n            type: NotificationType.WARNING\n        })\n    }\n\n    public info(messageText: string) : void {\n        this.notifyUser({\n            message: messageText,\n            type: NotificationType.INFO\n        })\n    }\n\n    public registerNotificationHandler(handler: INotificationHandler): void {\n        this.notificationHandlers.push(handler);\n    }\n\n}\n\nexport default NotificationServiceImpl;","import INotificationService from \"./INotificationService\";\nimport NotificationServiceImpl from \"./NotificationServiceImpl\";\n\nclass NotificationServiceFactory {\n    private notificationService : INotificationService = new NotificationServiceImpl();\n\n    public create() : INotificationService {\n        return this.notificationService;\n    }\n}\n\nexport default NotificationServiceFactory;","import {IconName, Intent, Position, Toaster} from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport INotificationService, {\n    INotification,\n    INotificationHandler,\n    NotificationType\n} from \"../service/INotificationService\";\n\ninterface IToastHandlerProps {\n    notificationService: INotificationService\n}\n\nclass ToastHandler extends React.PureComponent<IToastHandlerProps, {}> implements INotificationHandler {\n    private toaster: Toaster|null = null;\n    private refHandlers = {\n        toaster: (ref: Toaster) => this.toaster = ref,\n    };\n\n    public componentDidMount(): void {\n        this.props.notificationService.registerNotificationHandler(this);\n    }\n\n    public componentWillUnmount(): void {\n        this.props.notificationService.deregisterNotificationHandler(this);\n    }\n\n    public handleNotification(notification: INotification): void {\n        let iconName: IconName;\n        let intentType: Intent;\n        switch (notification.type) {\n            case NotificationType.ERROR:\n                iconName = \"error\";\n                intentType = Intent.DANGER;\n                break;\n            case NotificationType.SUCCESS:\n                iconName = \"tick\";\n                intentType = Intent.SUCCESS;\n                break;\n            case NotificationType.WARNING:\n                iconName = \"warning-sign\";\n                intentType = Intent.WARNING;\n                break;\n            case NotificationType.INFO:\n                iconName = \"info-sign\";\n                intentType = Intent.PRIMARY;\n                break;\n            default:\n                iconName = \"help\";\n                intentType = Intent.NONE;\n                break;\n        }\n\n        if (this.toaster!= null) {\n            this.toaster.show({\n                icon: iconName,\n                intent: intentType,\n                message: notification.message\n            })\n        }\n    }\n\n    public render() {\n        return (\n            <Toaster position={Position.TOP_RIGHT} ref={this.refHandlers.toaster} />\n        )\n    }\n\n}\n\nexport default ToastHandler;","import NotificationServiceFactory from \"../service/NotificationServiceFactory\";\nimport ToastHandler from \"./ToastHandler\";\n// @ts-ignore\nimport React from \"react\";\n\nclass ToastHandlerFactory {\n    public constructor(\n        readonly notificationServiceFactory: NotificationServiceFactory\n    ) {\n\n    }\n\n    public create():JSX.Element {\n        return <ToastHandler notificationService={this.notificationServiceFactory.create()}/>\n    }\n}\n\nexport default ToastHandlerFactory;","/* tslint:disable */\n/* eslint-disable */\n/**\n * Openshift CI Inspector.\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Openshift CI Inspector.\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Job\n */\nexport interface Job {\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    completionTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitBaseLink?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitBaseRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitBaseSHA?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitOrg?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitRepo?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    gitRepoLink?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    job: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    jobSafeName: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    pendingTime?: string;\n    /**\n     * \n     * @type {Array<Pull>}\n     * @memberof Job\n     */\n    pulls: Array<Pull>;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    startTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    status: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Job\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface JobWithAssetURL\n */\nexport interface JobWithAssetURL {\n    /**\n     * AssetURL is the base URL for all assets.\n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    assetURL?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    completionTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitBaseLink?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitBaseRef?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitBaseSHA?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitOrg?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitRepo?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    gitRepoLink?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    job: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    jobSafeName: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    pendingTime?: string;\n    /**\n     * \n     * @type {Array<Pull>}\n     * @memberof JobWithAssetURL\n     */\n    pulls: Array<Pull>;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    startTime?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    status: string;\n    /**\n     * \n     * @type {string}\n     * @memberof JobWithAssetURL\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface JobsListResponseBody\n */\nexport interface JobsListResponseBody {\n    /**\n     * Jobs is the list of jobs in the response\n     * @type {Array<Job>}\n     * @memberof JobsListResponseBody\n     */\n    jobs: Array<Job>;\n}\n/**\n * \n * @export\n * @interface JobsMetricsResponseBody\n */\nexport interface JobsMetricsResponseBody {\n    /**\n     * \n     * @type {Array<QuerySeries>}\n     * @memberof JobsMetricsResponseBody\n     */\n    matrix?: Array<QuerySeries>;\n    /**\n     * \n     * @type {QueryPoint}\n     * @memberof JobsMetricsResponseBody\n     */\n    scalar?: QueryPoint;\n    /**\n     * \n     * @type {Array<QuerySample>}\n     * @memberof JobsMetricsResponseBody\n     */\n    vector?: Array<QuerySample>;\n}\n/**\n * \n * @export\n * @interface Pull\n */\nexport interface Pull {\n    /**\n     * Author is the GitHub username of the author of the PR.\n     * @type {string}\n     * @memberof Pull\n     */\n    author: string;\n    /**\n     * AuthorLink is a HTTP URL of the author\\'s profile.\n     * @type {string}\n     * @memberof Pull\n     */\n    authorLink: string;\n    /**\n     * CommitLink is a HTTP URL of the commit.\n     * @type {string}\n     * @memberof Pull\n     */\n    commitLink: string;\n    /**\n     * Number is the pull request number\n     * @type {number}\n     * @memberof Pull\n     */\n    number: number;\n    /**\n     * PullLink is a HTTP URL of the pull request.\n     * @type {string}\n     * @memberof Pull\n     */\n    pullLink: string;\n    /**\n     * SHA is the SHA of the pull request.\n     * @type {string}\n     * @memberof Pull\n     */\n    sha: string;\n}\n/**\n * \n * @export\n * @interface QueryLabel\n */\nexport interface QueryLabel {\n    /**\n     * \n     * @type {string}\n     * @memberof QueryLabel\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QueryLabel\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface QueryPoint\n */\nexport interface QueryPoint {\n    /**\n     * \n     * @type {number}\n     * @memberof QueryPoint\n     */\n    timestamp: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QueryPoint\n     */\n    value: number;\n}\n/**\n * \n * @export\n * @interface QuerySample\n */\nexport interface QuerySample {\n    /**\n     * \n     * @type {Array<QueryLabel>}\n     * @memberof QuerySample\n     */\n    labels: Array<QueryLabel>;\n    /**\n     * \n     * @type {QueryPoint}\n     * @memberof QuerySample\n     */\n    point: QueryPoint;\n}\n/**\n * \n * @export\n * @interface QuerySeries\n */\nexport interface QuerySeries {\n    /**\n     * \n     * @type {Array<QueryLabel>}\n     * @memberof QuerySeries\n     */\n    labels: Array<QueryLabel>;\n    /**\n     * \n     * @type {Array<QueryPoint>}\n     * @memberof QuerySeries\n     */\n    points: Array<QueryPoint>;\n}\n/**\n * \n * @export\n * @interface SingleJobResponseBody\n */\nexport interface SingleJobResponseBody {\n    /**\n     * \n     * @type {JobWithAssetURL}\n     * @memberof SingleJobResponseBody\n     */\n    job: JobWithAssetURL;\n}\n\n/**\n * JobsApi - axios parameter creator\n * @export\n */\nexport const JobsApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get a single job by ID.\n         * @param {string} iD ID of the job to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJob: async (iD: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iD' is not null or undefined\n            if (iD === null || iD === undefined) {\n                throw new RequiredError('iD','Required parameter iD was null or undefined when calling getJob.');\n            }\n            const localVarPath = `/jobs/{ID}`\n                .replace(`{${\"ID\"}}`, encodeURIComponent(String(iD)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                queryParameters.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.query) {\n                queryParameters.set(key, options.query[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * Returns returns the queried metrics\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [query] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetrics: async (iD: string, query?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iD' is not null or undefined\n            if (iD === null || iD === undefined) {\n                throw new RequiredError('iD','Required parameter iD was null or undefined when calling getMetrics.');\n            }\n            const localVarPath = `/jobs/{ID}/metrics`\n                .replace(`{${\"ID\"}}`, encodeURIComponent(String(iD)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (query !== undefined) {\n                localVarQueryParameter['query'] = query;\n            }\n\n\n    \n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                queryParameters.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.query) {\n                queryParameters.set(key, options.query[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of previous jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPreviousJobs: async (iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iD' is not null or undefined\n            if (iD === null || iD === undefined) {\n                throw new RequiredError('iD','Required parameter iD was null or undefined when calling getPreviousJobs.');\n            }\n            const localVarPath = `/jobs/{ID}/previous`\n                .replace(`{${\"ID\"}}`, encodeURIComponent(String(iD)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (jobLike !== undefined) {\n                localVarQueryParameter['jobLike'] = jobLike;\n            }\n\n            if (repoLike !== undefined) {\n                localVarQueryParameter['repoLike'] = repoLike;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n\n    \n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                queryParameters.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.query) {\n                queryParameters.set(key, options.query[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of related jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRelatedJobs: async (iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'iD' is not null or undefined\n            if (iD === null || iD === undefined) {\n                throw new RequiredError('iD','Required parameter iD was null or undefined when calling getRelatedJobs.');\n            }\n            const localVarPath = `/jobs/{ID}/related`\n                .replace(`{${\"ID\"}}`, encodeURIComponent(String(iD)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (jobLike !== undefined) {\n                localVarQueryParameter['jobLike'] = jobLike;\n            }\n\n            if (repoLike !== undefined) {\n                localVarQueryParameter['repoLike'] = repoLike;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n\n    \n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                queryParameters.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.query) {\n                queryParameters.set(key, options.query[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a list of jobs currently stored.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobs: async (jobLike?: string, repoLike?: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/jobs`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, 'https://example.com');\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (jobLike !== undefined) {\n                localVarQueryParameter['jobLike'] = jobLike;\n            }\n\n            if (repoLike !== undefined) {\n                localVarQueryParameter['repoLike'] = repoLike;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n\n    \n            const queryParameters = new URLSearchParams(localVarUrlObj.search);\n            for (const key in localVarQueryParameter) {\n                queryParameters.set(key, localVarQueryParameter[key]);\n            }\n            for (const key in options.query) {\n                queryParameters.set(key, options.query[key]);\n            }\n            localVarUrlObj.search = (new URLSearchParams(queryParameters)).toString();\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * JobsApi - functional programming interface\n * @export\n */\nexport const JobsApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Get a single job by ID.\n         * @param {string} iD ID of the job to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getJob(iD: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SingleJobResponseBody>> {\n            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getJob(iD, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * Returns returns the queried metrics\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [query] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetrics(iD: string, query?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsMetricsResponseBody>> {\n            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getMetrics(iD, query, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of previous jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getPreviousJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsListResponseBody>> {\n            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getPreviousJobs(iD, jobLike, repoLike, limit, offset, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of related jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getRelatedJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsListResponseBody>> {\n            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).getRelatedJobs(iD, jobLike, repoLike, limit, offset, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a list of jobs currently stored.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listJobs(jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobsListResponseBody>> {\n            const localVarAxiosArgs = await JobsApiAxiosParamCreator(configuration).listJobs(jobLike, repoLike, limit, offset, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: (configuration?.basePath || basePath) + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * JobsApi - factory interface\n * @export\n */\nexport const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Get a single job by ID.\n         * @param {string} iD ID of the job to fetch.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getJob(iD: string, options?: any): AxiosPromise<SingleJobResponseBody> {\n            return JobsApiFp(configuration).getJob(iD, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * Returns returns the queried metrics\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [query] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetrics(iD: string, query?: string, options?: any): AxiosPromise<JobsMetricsResponseBody> {\n            return JobsApiFp(configuration).getMetrics(iD, query, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of previous jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPreviousJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): AxiosPromise<JobsListResponseBody> {\n            return JobsApiFp(configuration).getPreviousJobs(iD, jobLike, repoLike, limit, offset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of related jobs for the same build and branch.\n         * @param {string} iD ID of the job to fetch.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRelatedJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): AxiosPromise<JobsListResponseBody> {\n            return JobsApiFp(configuration).getRelatedJobs(iD, jobLike, repoLike, limit, offset, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a list of jobs currently stored.\n         * @param {string} [jobLike] Job name part to search for.\n         * @param {string} [repoLike] Repository name part to search for.\n         * @param {number} [limit] How many items to fetch.\n         * @param {number} [offset] At which item to start\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listJobs(jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any): AxiosPromise<JobsListResponseBody> {\n            return JobsApiFp(configuration).listJobs(jobLike, repoLike, limit, offset, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * JobsApi - object-oriented interface\n * @export\n * @class JobsApi\n * @extends {BaseAPI}\n */\nexport class JobsApi extends BaseAPI {\n    /**\n     * \n     * @summary Get a single job by ID.\n     * @param {string} iD ID of the job to fetch.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JobsApi\n     */\n    public getJob(iD: string, options?: any) {\n        return JobsApiFp(this.configuration).getJob(iD, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * Returns returns the queried metrics\n     * @param {string} iD ID of the job to fetch.\n     * @param {string} [query] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JobsApi\n     */\n    public getMetrics(iD: string, query?: string, options?: any) {\n        return JobsApiFp(this.configuration).getMetrics(iD, query, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of previous jobs for the same build and branch.\n     * @param {string} iD ID of the job to fetch.\n     * @param {string} [jobLike] Job name part to search for.\n     * @param {string} [repoLike] Repository name part to search for.\n     * @param {number} [limit] How many items to fetch.\n     * @param {number} [offset] At which item to start\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JobsApi\n     */\n    public getPreviousJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any) {\n        return JobsApiFp(this.configuration).getPreviousJobs(iD, jobLike, repoLike, limit, offset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of related jobs for the same build and branch.\n     * @param {string} iD ID of the job to fetch.\n     * @param {string} [jobLike] Job name part to search for.\n     * @param {string} [repoLike] Repository name part to search for.\n     * @param {number} [limit] How many items to fetch.\n     * @param {number} [offset] At which item to start\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JobsApi\n     */\n    public getRelatedJobs(iD: string, jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any) {\n        return JobsApiFp(this.configuration).getRelatedJobs(iD, jobLike, repoLike, limit, offset, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a list of jobs currently stored.\n     * @param {string} [jobLike] Job name part to search for.\n     * @param {string} [repoLike] Repository name part to search for.\n     * @param {number} [limit] How many items to fetch.\n     * @param {number} [offset] At which item to start\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof JobsApi\n     */\n    public listJobs(jobLike?: string, repoLike?: string, limit?: number, offset?: number, options?: any) {\n        return JobsApiFp(this.configuration).listJobs(jobLike, repoLike, limit, offset, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Openshift CI Inspector.\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import {Job, JobsApi} from \"../api-client\";\r\nimport {AbstractService} from \"../service/service\";\r\nimport INotificationService, {NotificationType} from \"../notification/service/INotificationService\";\r\n\r\nexport default class JobsListService extends AbstractService {\r\n    private loaded: boolean\r\n    private refreshing: boolean\r\n    private jobs: Array<Job> = new Array<Job>()\r\n    private jobFilter: string = \"\"\r\n    private repoFilter: string = \"\"\r\n\r\n    constructor(\r\n        private api: JobsApi,\r\n        private notificationService: INotificationService\r\n    ) {\r\n        super()\r\n        this.loaded = false\r\n        this.refreshing = false\r\n        this.jobs = new Array<Job>()\r\n    }\r\n\r\n    public getJobs(): Array<Job> {\r\n        return this.jobs\r\n    }\r\n\r\n    public isLoaded(): boolean {\r\n        return this.loaded\r\n    }\r\n\r\n    public isRefreshing(): boolean{\r\n        return this.refreshing\r\n    }\r\n\r\n    public setFilters(jobFilter: string, repoFilter: string): void {\r\n        this.jobFilter = jobFilter\r\n        this.repoFilter = repoFilter\r\n        this.refresh()\r\n    }\r\n\r\n\r\n    public async refresh() {\r\n        this.refreshing = true\r\n        this.notify()\r\n        try {\r\n            let response = await this.api.listJobs(\r\n                this.jobFilter, this.repoFilter\r\n            )\r\n            if (response.data.jobs) {\r\n                this.jobs = response.data.jobs\r\n            }\r\n            this.loaded = true\r\n        } catch (e) {\r\n            this.notificationService.notifyUser({\r\n                type: NotificationType.ERROR,\r\n                message: \"Failed to update jobs list.\"\r\n            })\r\n            console.log(e)\r\n        } finally {\r\n            this.refreshing = false\r\n            this.notify()\r\n        }\r\n    }\r\n}","\r\nexport interface IServiceHandler {\r\n    update():void;\r\n}\r\n\r\nexport interface IService {\r\n    register(handler: IServiceHandler): void;\r\n    deregister(handler: IServiceHandler): void;\r\n}\r\n\r\nexport abstract class AbstractService implements IService{\r\n    private handlers: Set<IServiceHandler> = new Set();\r\n\r\n    deregister(handler: IServiceHandler): void {\r\n        this.handlers.delete(handler)\r\n    }\r\n\r\n    register(handler: IServiceHandler): void {\r\n        this.handlers.add(handler)\r\n    }\r\n\r\n    notify() {\r\n        this.handlers.forEach(handler => handler.update())\r\n    }\r\n}","import {JobsApi, JobWithAssetURL} from \"../api-client\";\nimport INotificationService, {NotificationType} from \"../notification/service/INotificationService\";\n\nexport default class JobsGetService {\n\n    constructor(\n        private api: JobsApi,\n        private notificationService: INotificationService\n    ) {}\n\n    public async getJob(id: string): Promise<JobWithAssetURL> {\n        try {\n            let response = await this.api.getJob(id)\n            return response.data.job\n        } catch (e) {\n            this.notificationService.notifyUser({\n                type: NotificationType.ERROR,\n                message: \"Failed to fetch job \" + id + \".\"\n            })\n            console.log(e)\n            throw e\n        }\n    }\n}","import {Tooltip} from \"@material-ui/core\";\nimport * as React from \"react\";\n\nexport interface IJobTimeProps{\n    startTime?: string\n    completionTime?: string\n}\n\nfunction timeDuration(seconds: number) {\n    const years = Math.floor(seconds / 31536000);\n    if (years >= 1) {\n        return years + \" years\";\n    }\n    const months = Math.floor(seconds / 2592000);\n    if (months >= 1) {\n        return months + \" months\";\n    }\n    const days = Math.floor(seconds / 86400);\n    if (days >= 1) {\n        return days + \" days\";\n    }\n    const hours = Math.floor(seconds / 3600);\n    if (hours >= 1) {\n        return hours + \" hours\";\n    }\n    const minutes = Math.floor(seconds / 60);\n    if (minutes >= 1) {\n        return minutes + \" minutes\";\n    }\n    return Math.floor(seconds) + \" seconds\";\n}\n\nexport default function JobDuration(props: IJobTimeProps) {\n    if (!props.startTime || props.startTime === \"\") {\n        return <span>&mdash;</span>\n    }\n    if (!props.completionTime || props.completionTime === \"\") {\n        return <span>&mdash;</span>\n    }\n    const parsedStartTime = Date.parse(props.startTime)\n    const parsedCompletionTime = Date.parse(props.completionTime)\n    const seconds = Math.floor((parsedCompletionTime - parsedStartTime) / 1000);\n    return <Tooltip title={seconds + \" seconds\"}><span><span style={{whiteSpace:\"nowrap\"}}>{timeDuration(seconds)}</span></span></Tooltip>\n}\n","import React from \"react\";\r\nimport JobsGetService from \"../../get\";\r\nimport {JobWithAssetURL} from \"../../../api-client\";\r\nimport {\r\n    Box, Button,\r\n    Card, CardActions,\r\n    CardContent, CardHeader,\r\n    CircularProgress,\r\n    Grid,\r\n    Table,\r\n    TableBody, TableCell,\r\n    TableRow,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport JobStatus from \"./JobStatus\";\r\nimport JobTime from \"./JobTime\";\r\nimport JobDuration from \"./JobDuration\";\r\n\r\ninterface IJobInfoCardState {\r\n    isLoaded: boolean,\r\n    isRefreshing: boolean,\r\n    job?: JobWithAssetURL,\r\n}\r\n\r\ninterface IJobInfoCardProps {\r\n    id: string\r\n    jobsGetService: JobsGetService\r\n}\r\n\r\nexport default class JobInfoCard extends React.Component<IJobInfoCardProps, IJobInfoCardState> {\r\n    constructor(props: IJobInfoCardProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            isRefreshing: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.reload()\r\n    }\r\n\r\n    componentDidUpdate = (prevProps: Readonly<IJobInfoCardProps>, prevState: Readonly<IJobInfoCardState>, snapshot?: any) => {\r\n        if (prevProps.id !== this.props.id) {\r\n            this.reload()\r\n        }\r\n    }\r\n\r\n    reload = async () => {\r\n        this.setState({\r\n            isRefreshing: true\r\n        })\r\n        const job = await this.props.jobsGetService.getJob(this.props.id)\r\n        this.setState({\r\n            isRefreshing: false,\r\n            isLoaded: true,\r\n            job: job,\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        if (this.state.isRefreshing) {\r\n            return <Box m={4} display=\"flex\" alignItems=\"center\" justifyContent=\"center\"><CircularProgress /></Box>\r\n        }\r\n        if (!this.state.isLoaded) {\r\n            return <div />\r\n        }\r\n        if (!this.state.job) {\r\n            return <Typography component={\"h1\"}>Job not found</Typography>\r\n        }\r\n        const job = this.state.job\r\n        return <React.Fragment>\r\n            <Card>\r\n                <CardHeader avatar={<JobStatus status={job.status} fontSize={\"inherit\"} />} title={this.state.job.job} />\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                            <Table size=\"small\">\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Status:</strong></TableCell>\r\n                                        <TableCell>{job.status}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Repository:</strong></TableCell>\r\n                                        <TableCell>{job.gitOrg != null && job.gitRepo != null?<a href={job.gitRepoLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{job.gitOrg}/{job.gitRepo} <LaunchIcon style={{fontSize:\"1em\"}} /></a>:null}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Base ref:</strong></TableCell>\r\n                                        <TableCell>{job.gitBaseRef}</TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Pulls:</strong></TableCell>\r\n                                        <TableCell>{this.getPulls()}</TableCell>\r\n                                    </TableRow>\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Table size=\"small\">\r\n                                <TableBody>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Started:</strong></TableCell>\r\n                                        <TableCell><JobTime time={job.startTime} /></TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Pending:</strong></TableCell>\r\n                                        <TableCell><JobTime time={job.pendingTime} /></TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Completed:</strong></TableCell>\r\n                                        <TableCell><JobTime time={job.completionTime} /></TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell><strong>Total time:</strong></TableCell>\r\n                                        <TableCell><JobDuration startTime={job.pendingTime} completionTime={job.completionTime} /></TableCell>\r\n                                    </TableRow>\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <a href={job.url}  target=\"_blank\" rel={\"noreferrer noopener\"}>\r\n                        <Button variant=\"outlined\" color=\"secondary\" size={\"small\"}>Open in Prow&nbsp;<LaunchIcon style={{fontSize:\"1em\"}} /></Button>\r\n                    </a>\r\n                    {!job.assetURL?null:\r\n                        <a href={job.assetURL}  target=\"_blank\" rel={\"noreferrer noopener\"}>\r\n                            <Button variant=\"outlined\" color=\"secondary\" size={\"small\"}>Artifacts&nbsp;<LaunchIcon style={{fontSize:\"1em\"}} /></Button>\r\n                        </a>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </React.Fragment>\r\n    }\r\n\r\n    getPulls = () => {\r\n        const job = this.state.job\r\n        if (job?.pulls == null) {\r\n            return null\r\n        }\r\n        return job.pulls.map(pull => {\r\n            return <span key={pull.number}><a href={pull.pullLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.number} <LaunchIcon style={{fontSize:\"1em\"}} /></a> by <a href={pull.authorLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.author} <LaunchIcon style={{fontSize:\"1em\"}} /></a></span>\r\n        })\r\n    }\r\n}","import {Job} from \"../../../api-client\";\r\nimport React from \"react\";\r\nimport JobsGetPreviousService from \"../../previous\";\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardHeader,\r\n    LinearProgress, Table, TableBody,\r\n    TableCell, TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n} from \"@material-ui/core\";\r\nimport JobStatus from \"./JobStatus\";\r\nimport JobTime from \"./JobTime\";\r\nimport Link from \"../../../common/Link\";\r\n\r\ninterface IJobPreviousCardState {\r\n    isLoaded: boolean,\r\n    isRefreshing: boolean,\r\n    jobs: Array<Job>,\r\n}\r\n\r\ninterface IJobPreviousCardProps {\r\n    id: string\r\n    jobsGetPreviousService: JobsGetPreviousService\r\n}\r\n\r\nexport default class JobPreviousCard extends React.Component<IJobPreviousCardProps, IJobPreviousCardState> {\r\n    constructor(props: IJobPreviousCardProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            isRefreshing: true,\r\n            jobs: new Array<Job>()\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.reload()\r\n    }\r\n\r\n    componentDidUpdate = (prevProps: Readonly<IJobPreviousCardProps>, prevState: Readonly<IJobPreviousCardState>, snapshot?: any) => {\r\n        if (prevProps.id !== this.props.id) {\r\n            this.reload()\r\n        }\r\n    }\r\n\r\n    reload = async () => {\r\n        this.setState({\r\n            isRefreshing: true\r\n        })\r\n        const jobs = await this.props.jobsGetPreviousService.getJob(this.props.id)\r\n        this.setState({\r\n            isRefreshing: false,\r\n            isLoaded: true,\r\n            jobs: jobs,\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        return <React.Fragment>\r\n            <Card>\r\n                {this.state.isRefreshing?<LinearProgress />:null}\r\n                <CardHeader title=\"Previous jobs\" subheader={\"Lists previous jobs for the same job type and repository.\"} />\r\n                <TableContainer style={{height:\"500px\"}}>\r\n                    <Table size=\"small\" stickyHeader>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Time</TableCell>\r\n                                <TableCell>Pulls</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.jobs.map(job => {\r\n                                return <TableRow key={job.id}>\r\n                                    <TableCell>\r\n                                        <Box display={\"flex\"} flexDirection={\"row\"}>\r\n                                            <Box component={\"span\"} mr={1} style={{paddingTop:\"2px\"}}>\r\n                                                <JobStatus status={job.status} fontSize={\"inherit\"} />\r\n                                            </Box>\r\n                                            <Box flex={1}>\r\n                                                <Link to={\"/\" + job.id}>\r\n                                                    <JobTime time={job.startTime} />\r\n                                                </Link>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell>{this.getPulls(job)}</TableCell>\r\n                                </TableRow>\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Card>\r\n        </React.Fragment>\r\n    }\r\n\r\n    getPulls = (job: Job) => {\r\n        if (job.pulls == null) {\r\n            return null\r\n        }\r\n        return job.pulls.map(pull => {\r\n            return <span key={pull.number}><a href={pull.pullLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.number}</a> by <a href={pull.authorLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.author}</a></span>\r\n        })\r\n    }\r\n}","import {Job} from \"../../../api-client\";\r\nimport React from \"react\";\r\nimport JobsGetRelatedService from \"../../related\";\r\nimport {\r\n    Box,\r\n    Card,\r\n    CardHeader,\r\n    LinearProgress, Table, TableBody,\r\n    TableCell, TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n} from \"@material-ui/core\";\r\nimport JobStatus from \"./JobStatus\";\r\nimport JobTime from \"./JobTime\";\r\nimport Link from \"../../../common/Link\";\r\n\r\ninterface IJobRelatedCardState {\r\n    isLoaded: boolean,\r\n    isRefreshing: boolean,\r\n    jobs: Array<Job>,\r\n}\r\n\r\ninterface IJobRelatedCardProps {\r\n    id: string\r\n    jobsGetRelatedService: JobsGetRelatedService\r\n}\r\n\r\nexport default class JobRelatedCard extends React.Component<IJobRelatedCardProps, IJobRelatedCardState> {\r\n    constructor(props: IJobRelatedCardProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoaded: false,\r\n            isRefreshing: true,\r\n            jobs: new Array<Job>()\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.reload()\r\n    }\r\n\r\n    componentDidUpdate = (prevProps: Readonly<IJobRelatedCardProps>, prevState: Readonly<IJobRelatedCardState>, snapshot?: any) => {\r\n        if (prevProps.id !== this.props.id) {\r\n            this.reload()\r\n        }\r\n    }\r\n\r\n    reload = async () => {\r\n        this.setState({\r\n            isRefreshing: true\r\n        })\r\n        const jobs = await this.props.jobsGetRelatedService.getJob(this.props.id)\r\n        this.setState({\r\n            isRefreshing: false,\r\n            isLoaded: true,\r\n            jobs: jobs,\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        return <React.Fragment>\r\n            <Card>\r\n                {this.state.isRefreshing?<LinearProgress />:null}\r\n                <CardHeader title=\"Related jobs\" subheader={\"Lists other jobs for the same repository, base, and pull request ID.\"} />\r\n                <TableContainer style={{height: \"500px\"}}>\r\n                    <Table size=\"small\" stickyHeader>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Job</TableCell>\r\n                                <TableCell>Start</TableCell>\r\n                                <TableCell>Git repository</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.jobs.map(job => {\r\n                                return <TableRow key={job.id}>\r\n                                    <TableCell>\r\n                                        <Box display={\"flex\"} flexDirection={\"row\"}>\r\n                                            <Box component={\"span\"} mr={1} style={{paddingTop:\"2px\"}}>\r\n                                                <JobStatus status={job.status} fontSize={\"inherit\"} />\r\n                                            </Box>\r\n                                            <Box flex={1}>\r\n                                                <Link to={\"/\" + job.id}>\r\n                                                    {job.job}\r\n                                                </Link>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <JobTime time={job.startTime} />\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {job.gitOrg != null && job.gitRepo != null?<a href={job.gitRepoLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{job.gitOrg}/{job.gitRepo}</a>:null}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Card>\r\n        </React.Fragment>\r\n    }\r\n\r\n    getPulls = (job: Job) => {\r\n        if (job.pulls == null) {\r\n            return null\r\n        }\r\n        return job.pulls.map(pull => {\r\n            return <span key={pull.number}><a href={pull.pullLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.number}</a> by <a href={pull.authorLink} target=\"_blank\" rel={\"noreferrer noopener\"}>{pull.author}</a></span>\r\n        })\r\n    }\r\n}","import * as React from \"react\";\nimport {Box, Button, Card, CardContent, CardHeader, LinearProgress, TextField} from \"@material-ui/core\";\nimport {ResponsiveLine, Serie} from \"@nivo/line\"\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport JobsMetricsService from \"../../metrics\";\nimport {QueryPoint, QuerySample, QuerySeries} from \"../../../api-client\";\nimport moment from \"moment-timezone\";\n\ninterface IJobMetricsCardProps {\n    id: string\n    metricsService: JobsMetricsService\n}\n\ninterface IJobMetricsCardState {\n    query: string\n    loading: boolean\n    loaded: boolean\n    line: Serie[]\n    timeRangeLowest: number,\n    timeRangeHighest: number,\n}\n\nexport default class JobMetricsCard extends React.Component<IJobMetricsCardProps, IJobMetricsCardState> {\n    constructor(props: IJobMetricsCardProps) {\n        super(props);\n        this.state = {\n            query: \"histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m]))\",\n            loading: false,\n            loaded: false,\n            line: [],\n            timeRangeLowest: 0,\n            timeRangeHighest: 0\n        }\n    }\n    onQueryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            query: e.target.value\n        })\n    }\n\n    onRun = async () => {\n        this.setState({\n            loading: true,\n        })\n        try {\n            const response = await this.props.metricsService.getMetrics(this.props.id, this.state.query)\n            if (response.matrix) {\n                this.updateMatrix(response.matrix)\n            } else if (response.vector) {\n                this.updateVector(response.vector)\n            } else if (response.scalar) {\n                this.updateScalar(response.scalar)\n            }\n        } catch (e) {\n            this.setState({\n                loading: false,\n            })\n            throw e\n        }\n    }\n\n    updateMatrix = (matrix: Array<QuerySeries>) => {\n        let lowestTimestamp = 0\n        let highestTimestamp = 0\n        const series = matrix.map(function (value):Serie {\n            return {\n                id: value.labels.map(function (label) {\n                    return label.name + \"=\" + label.value\n                }).reduce(function (prev, current) {\n                    return prev + \",\" + current\n                }),\n                data: value.points.map(function (v, index) {\n                    if (lowestTimestamp === 0 || v.timestamp < lowestTimestamp) {\n                        lowestTimestamp = v.timestamp\n                    }\n                    if (v.timestamp > highestTimestamp) {\n                        highestTimestamp = v.timestamp\n                    }\n                    let d = moment.unix(Math.floor(v.timestamp/1000)).tz(\"UTC\")\n                    return {\n                        x: d.format(\"HH:mm:ss\"),\n                        y: v.value\n                    }\n                })\n            }\n        })\n        this.setState({\n            loaded: true,\n            loading: false,\n            line: series,\n            timeRangeLowest: lowestTimestamp,\n            timeRangeHighest: highestTimestamp,\n        })\n    }\n\n    updateVector = (vector: Array<QuerySample>) => {\n        this.setState({\n            loaded: true,\n            loading: false,\n        })\n    }\n\n    updateScalar = (scalar: QueryPoint) => {\n        this.setState({\n            loaded: true,\n            loading: false,\n        })\n    }\n\n    getTickValues = () => {\n        const diff = (this.state.timeRangeHighest - this.state.timeRangeLowest)\n        let result = []\n        if (diff !== 0) {\n            for (let i = this.state.timeRangeLowest; i < this.state.timeRangeHighest; i = i + diff / 10) {\n                result.push(new Date(i).getUTCDate())\n            }\n        }\n        return result\n    }\n\n    render = () => {\n        return <React.Fragment>\n            <Card>\n                <CardHeader title={\"Metrics\"} />\n                <CardContent>\n                    <Box display={\"flex\"} flexDirection={\"row\"}>\n                        <Box flex={1}>\n                            <TextField\n                                label=\"Query\"\n                                disabled={this.state.loading}\n                                onChange={this.onQueryChange}\n                                value={this.state.query}\n                                fullWidth={true}\n                                autoComplete={\"on\"}\n                            />\n                        </Box>\n                        <Box>\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={this.state.loading || !this.state.query}\n                                onClick={this.onRun}>\n                                Run {this.state.loading?<HourglassEmptyIcon />:<PlayArrowIcon />}\n                            </Button>\n                        </Box>\n                    </Box>\n                    <Box height={\"400px\"}>\n                        {this.state.loading?<LinearProgress />:\n                            this.state.loaded?\n                            <ResponsiveLine\n                                xScale={{\n                                    type: 'time',\n                                    format: \"%H:%M:%S\",\n                                    precision: \"second\",\n                                }}\n                                xFormat=\"time:%H:%M:%S\"\n                                yScale={{ type: 'linear', min: 'auto', max: 'auto' }}\n                                margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                                data={this.state.line}\n                                pointSize={1}\n                                pointColor={{ from: 'color', modifiers: [] }}\n                                pointBorderWidth={1}\n                                pointBorderColor={{ from: 'serieColor', modifiers: [] }}\n                                axisTop={null}\n                                axisRight={null}\n                                axisBottom={{\n                                    orient: 'bottom',\n                                    tickSize: 5,\n                                    tickPadding: 5,\n                                    tickRotation: -60,\n                                    tickValues: \"every 1 minutes\",\n                                    format: '%H:%M:%S',\n                                    legend: 'Time',\n                                    legendOffset: 36,\n                                    legendPosition: 'middle'\n                                }}\n                                axisLeft={{\n                                    orient: 'left',\n                                    tickSize: 5,\n                                    tickPadding: 5,\n                                    tickRotation: 0,\n                                }}\n                                useMesh={true}\n                            />\n                            :null\n                        }\n                    </Box>\n                </CardContent>\n            </Card>\n        </React.Fragment>\n    }\n}\n","import React from \"react\";\nimport JobsGetService from \"../get\";\nimport JobInfoCard from \"./components/JobInfoCard\";\nimport {\n    AppBar,\n    Badge,\n    Box,\n    Grid,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText, Paper,\n    Tab,\n    Tabs,\n    Typography\n} from \"@material-ui/core\";\nimport JobPreviousCard from \"./components/JobPreviousCard\";\nimport JobRelatedCard from \"./components/JobRelatedCard\";\nimport JobsGetRelatedService from \"../related\";\nimport JobsGetPreviousService from \"../previous\";\nimport JobMetricsCard from \"./components/JobMetricsCard\";\nimport JobsMetricsService from \"../metrics\";\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\nimport CheckIcon from '@material-ui/icons/Check';\n\ninterface IJobDetailsState {\n    tab: number\n}\n\ninterface IJobDetailsProps {\n    id: string\n    jobsGetService: JobsGetService\n    jobsGetRelatedService: JobsGetRelatedService\n    jobsGetPreviousService: JobsGetPreviousService\n    metricsService: JobsMetricsService\n}\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    dir?: string;\n    index: any;\n    value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <div\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`full-width-tabpanel-${index}`}\n            aria-labelledby={`full-width-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box m={2}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nexport default class JobDetailsPage extends React.Component<IJobDetailsProps, IJobDetailsState> {\n    constructor(props: IJobDetailsProps) {\n        super(props);\n        this.state = {\n            tab: 0\n        }\n    }\n\n    render = () => {\n        return <React.Fragment>\n            <AppBar position=\"static\" color={\"secondary\"}>\n                <Tabs value={this.state.tab} onChange={this.changeTab} indicatorColor={\"primary\"}>\n                    <Tab label=\"Info\"  />\n                    <Tab label=\"Metrics\"  />\n                    <Tab label={<Badge badgeContent={5} color=\"error\">Operators</Badge>}  />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={this.state.tab} index={0}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12}>\n                        <JobInfoCard id={this.props.id} jobsGetService={this.props.jobsGetService} />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <JobRelatedCard id={this.props.id}  jobsGetRelatedService={this.props.jobsGetRelatedService}/>\n                    </Grid>\n                    <Grid item xs={6}>\n                        <JobPreviousCard id={this.props.id}  jobsGetPreviousService={this.props.jobsGetPreviousService}/>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n            <TabPanel value={this.state.tab} index={1}>\n                <Grid item xs={12}>\n                    <JobMetricsCard id={this.props.id} metricsService={this.props.metricsService} />\n                </Grid>\n            </TabPanel>\n            <TabPanel value={this.state.tab} index={2}>\n                <Box display={\"flex\"} flexDirection={\"row\"}>\n                    <Box mr={2}>\n                        <Paper elevation={2}>\n                            <List>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"error\"}><Typography color={\"error\"}><ReportProblemIcon /></Typography></ListItemIcon>\n                                    <ListItemText>machine-api</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"error\"}><Typography color={\"error\"}><ReportProblemIcon /></Typography></ListItemIcon>\n                                    <ListItemText>authentication</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"success\"}><CheckIcon /></ListItemIcon>\n                                    <ListItemText>cloud-credential</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"success\"}><CheckIcon /></ListItemIcon>\n                                    <ListItemText>cluster-autoscaler</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"success\"}><CheckIcon /></ListItemIcon>\n                                    <ListItemText>config-operator</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"success\"}><CheckIcon /></ListItemIcon>\n                                    <ListItemText>console</ListItemText>\n                                </ListItem>\n                                <ListItem button={true}>\n                                    <ListItemIcon color={\"success\"}><CheckIcon /></ListItemIcon>\n                                    <ListItemText>csi-snapshot-controller</ListItemText>\n                                </ListItem>\n                            </List>\n                        </Paper>\n                    </Box>\n                    <Box flex={1}>\n                        <Paper elevation={2}>\n                            <Box p={2}>\n                        <pre>{`{\n    \"apiVersion\": \"v1\",\n    \"items\": [],\n    \"kind\": \"List\",\n    \"metadata\": {\n    \"resourceVersion\": \"\",\n    \"selfLink\": \"\"\n}`}</pre>\n                            </Box>\n                        </Paper>\n                    </Box>\n                </Box>\n            </TabPanel>\n        </React.Fragment>\n    }\n\n    changeTab = (event: React.ChangeEvent<{}>, newValue: number) => {\n        this.setState({\n            tab: newValue\n        })\n    }\n}","import {Job, JobsApi} from \"../api-client\";\nimport INotificationService, {NotificationType} from \"../notification/service/INotificationService\";\n\nexport default class JobsGetPreviousService {\n\n    constructor(\n        private api: JobsApi,\n        private notificationService: INotificationService\n    ) {}\n\n    public async getJob(id: string): Promise<Array<Job>> {\n        try {\n            let response = await this.api.getPreviousJobs(id)\n            return response.data.jobs\n        } catch (e) {\n            this.notificationService.notifyUser({\n                type: NotificationType.ERROR,\n                message: \"Failed to fetch previous jobs for \" + id + \".\"\n            })\n            console.log(e)\n            throw e\n        }\n    }\n}","import {Job, JobsApi} from \"../api-client\";\nimport INotificationService, {NotificationType} from \"../notification/service/INotificationService\";\n\nexport default class JobsGetRelatedService {\n\n    constructor(\n        private api: JobsApi,\n        private notificationService: INotificationService\n    ) {}\n\n    public async getJob(id: string): Promise<Array<Job>> {\n        try {\n            let response = await this.api.getRelatedJobs(id)\n            return response.data.jobs\n        } catch (e) {\n            this.notificationService.notifyUser({\n                type: NotificationType.ERROR,\n                message: \"Failed to fetch related jobs for \" + id + \".\"\n            })\n            console.log(e)\n            throw e\n        }\n    }\n}","import {JobsApi, JobsMetricsResponseBody} from \"../api-client\";\r\nimport INotificationService, {NotificationType} from \"../notification/service/INotificationService\";\r\n\r\nexport default class JobsMetricsService {\r\n\r\n    constructor(\r\n        private api: JobsApi,\r\n        private notificationService: INotificationService\r\n    ) {}\r\n\r\n    public async getMetrics(id: string, query: string): Promise<JobsMetricsResponseBody> {\r\n        try {\r\n            let response = await this.api.getMetrics(id, query)\r\n            return response.data\r\n        } catch (e) {\r\n            this.notificationService.notifyUser({\r\n                type: NotificationType.ERROR,\r\n                message: \"Failed to execute query for job \" + id + \".\"\r\n            })\r\n            console.log(e)\r\n            throw e\r\n        }\r\n    }\r\n}","import CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport JobDashboardPage from \"./jobs/ui/JobDashboardPage\";\nimport './index.css';\nimport NotificationServiceFactory from \"./notification/service/NotificationServiceFactory\";\nimport ToastHandlerFactory from \"./notification/ui/ToastHandlerFactory\";\nimport theme from './theme';\nimport {Configuration, JobsApi} from \"./api-client\";\nimport JobsListService from \"./jobs/list\";\nimport JobsGetService from \"./jobs/get\";\nimport JobDetailsPage from \"./jobs/ui/JobDetailsPage\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport {RouteComponentProps} from \"react-router\";\nimport JobsGetPreviousService from \"./jobs/previous\";\nimport JobsGetRelatedService from \"./jobs/related\";\nimport JobsMetricsService from \"./jobs/metrics\";\n\nconst notificationServiceFactory = new NotificationServiceFactory();\nconst toastHandlerFactory = new ToastHandlerFactory(\n    notificationServiceFactory\n);\n\nconst baseURL = window.location.protocol + \"//\" + window.location.hostname + (\n    (window.location.protocol === \"http:\" && window.location.port !== \"80\") || (window.location.protocol === \"https:\" && window.location.port !== \"443\") ? \":\" + window.location.port:\"\"\n)\n\nconst apiConfiguration = new Configuration({\n    basePath: baseURL\n})\nconst jobsAPI = new JobsApi(apiConfiguration)\nconst jobsListService = new JobsListService(jobsAPI, notificationServiceFactory.create())\nconst jobsGetService = new JobsGetService(jobsAPI, notificationServiceFactory.create())\nconst jobsGetPreviousService = new JobsGetPreviousService(jobsAPI, notificationServiceFactory.create())\nconst jobsGetRelatedService = new JobsGetRelatedService(jobsAPI, notificationServiceFactory.create())\nconst jobMetricsService = new JobsMetricsService(jobsAPI, notificationServiceFactory.create())\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router>\n            <App\n                toastHandler={toastHandlerFactory.create()}\n            >\n                <Switch>\n                    <Route exact path=\"/\">\n                        <JobDashboardPage jobsListService={jobsListService} />\n                    </Route>\n                    <Route exact path=\"/:id\" component={jobDetailsRoute} />\n                </Switch>\n            </App>\n        </Router>\n    </ThemeProvider>,\n    document.getElementById('root') as HTMLElement\n);\n\nfunction jobDetailsRoute(props: RouteComponentProps<any>) {\n    return <JobDetailsPage\n        jobsGetService={jobsGetService}\n        id={props.match.params.id}\n        jobsGetPreviousService={jobsGetPreviousService}\n        jobsGetRelatedService={jobsGetRelatedService}\n        metricsService={jobMetricsService}\n    />\n}"],"sourceRoot":""}